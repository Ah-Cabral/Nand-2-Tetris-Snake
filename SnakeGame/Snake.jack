//Criando Classe Snake
class Snake {

    //Corpo da cobra --> Array
    field snakeArray snakeBody; 

    field int x, y;

    //Comprimento e tamanho da cobra
    field int lenght, size;

    //Constructor da Snake
    constructor Snake new(int CoordX, int CoordY) {

        var int c;
        
        let size = 14;
        
        let lenght = 3;

        let snakeBody = snakeArray.new();

        let c = 0;

        while (c < lenght) {

            do snakeBody.addPiece(Square.new(CoordX, CoordY, size));

            let CoordX = CoordX - size;

            let c = c + 1;
        }

        return this;
    }

    method void dispose() {

        var Square square;

        var int c;

        let c = 0;

        while (c < lenght) {

            let square = snakeBody[c];

            do square.dispose();

            let c = c + 1;
        }
        do Memory.deAlloc(this);

        return;
    }

    method void simpleMove(Square square, int CoordX, int CoordY) {

        do square.erase();

        do square.draw(CoordX, CoordY);

        return;
    }

    /* Método Draw, que desenhará na tela */
    method void draw() {
        do Screen.setColor(true);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    /* Método Erasem que desenhará em branco na tela. */
    method void erase() {
        do Screen.setColor(false);
        do Screen.drawRectangle(x, y, x + size, y + size);
        return;
    }

    //Movimento para cima que, assim como o para baixo, envolve o eixo y
    method void moveUp() {
        var int lastCoordX, lastCoordY, targetY, c;

        var Square square;

        let square = snakeBody.getValue(0);

        let targetY = square.getCoordY() - size;

        if (targetY > -1) {

            do simpleMove(square, square.getCoordX(), targetY);

            let lastCoordX = square.getlastCoordX();

            let lastCoordY = square.getlastCoordY();

            let c = 1;

            while(c < lenght ) {

                let square = snakeBody.getValue(c);

                do simpleMove(square, lastCoordX, lastCoordY);

                let lastCoordX = square.getlastCoordX();

                let lastCoordY = square.getlastCoordY();

                let c = c + 1;
            }
        }
        return;
    }

    method void moveDown() {

        var int lastCoordX, lastCoordY, targetY, c;

        var Square square;

        let square = snakeBody.getValue(0);

        let targetY = square.getCoordY() + size;

        if ((targetY + size) < 257) {

            do simpleMove(square, square.getCoordX(), targetY);

            let lastCoordX = square.getlastCoordX();

            let lastCoordY = square.getlastCoordY();

            let c = 1;

            while(c < lenght ) {

                let square = snakeBody.getValue(c);

                do simpleMove(square, lastCoordX, lastCoordY);

                let lastCoordX = square.getlastCoordX();

                let lastCoordY = square.getlastCoordY();

                let c = c + 1;
            }
        }
        return;
    }
    
        method void moveLeft() {

        var int lastCoordX, lastCoordY, targetX, c;

        var Square square;

        let square = snakeBody.getValue(0);

        let targetX = square.getCoordX() - size;

        if (targetX > -1) {

            do simpleMove(square, targetX, square.getCoordY());
            
            let lastCoordX = square.getlastCoordX();

            let lastCoordY = square.getlastCoordY();

            let c = 1;
            while(c < lenght ) {

                let square = snakeBody.getValue(c);

                do simpleMove(square, lastCoordX, lastCoordY);

                let lastCoordX = square.getlastCoordX();

                let lastCoordY = square.getlastCoordY();

                let c = c + 1;
            }
        }
        return;
    }

    //Movimento para direita que, assim como o para esquerda, envolve o eixo x
    method void moveRight() {

        var int lastCoordX, lastCoordY, targetX, c;

        var Square square;

        let square = snakeBody.getValue(0);

        let targetX = square.getCoordX() + size;

        if ((targetX + size) < 513) {

            do simpleMove(square, targetX, square.getCoordY());

            let lastCoordX = square.getlastCoordX();

            let lastCoordY = square.getlastCoordY();

            let c = 1;

            while(c < lenght ) {

                let square = snakeBody.getValue(c);

                do simpleMove(square, lastCoordX, lastCoordY);

                let lastCoordX = square.getlastCoordX();

                let lastCoordY = square.getlastCoordY();

                let c = c + 1;
            }
        }
        return;
    }

    // O Grow será utilizado para o crescimento do comprimento da cobra
    method void grow() {
        var Square tail;
        let tail = snakeBody.getValue(lenght - 1);

        do snakeBody.addPiece(Square.new(tail.getlastCoordX(), tail.getlastCoordY(), size));
        let lenght = lenght + 1;
        return;
    }

}